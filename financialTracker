import java.util.ArrayList;  
import java.util.List;  
import java.util.Scanner;  
  
// Define a class to represent a transaction  
class Transaction {  
   private double amount;  
   private String category;  
   private String date;  
  
   public Transaction(double amount, String category, String date) {  
      this.amount = amount;  
      this.category = category;  
      this.date = date;  
   }  
  
   public double getAmount() {  
      return amount;  
   }  
  
   public String getCategory() {  
      return category;  
   }  
  
   public String getDate() {  
      return date;  
   }  
}  
  
// Define a class to represent a financial account  
class FinancialAccount {  
   private double balance;  
   private List<Transaction> transactions;  
  
   public FinancialAccount() {  
      this.balance = 0;  
      this.transactions = new ArrayList<>();  
   }  
  
   public void addTransaction(Transaction transaction) {  
      transactions.add(transaction);  
      balance += transaction.getAmount();  
   }  
  
   public void removeTransaction(Transaction transaction) {  
      transactions.remove(transaction);  
      balance -= transaction.getAmount();  
   }  
  
   public double getBalance() {  
      return balance;  
   }  
  
   public List<Transaction> getTransactions() {  
      return transactions;  
   }  
}  
  
// Define a class to manage the financial account  
class FinancialManager {  
   private FinancialAccount account;  
   private Scanner scanner;  
  
   public FinancialManager() {  
      this.account = new FinancialAccount();  
      this.scanner = new Scanner(System.in);  
   }  
  
   public void run() {  
      while (true) {  
        System.out.println("Financial Manager");  
        System.out.println("1. Add Income");  
        System.out.println("2. Add Expense");  
        System.out.println("3. View Balance");  
        System.out.println("4. View Transactions");  
        System.out.println("5. Generate Summary");  
        System.out.println("6. Update Transaction");  
        System.out.println("7. Delete Transaction");  
        System.out.println("8. Search Transactions");  
        System.out.println("9. Exit");  
        System.out.print("Enter your choice: ");  
        int choice = scanner.nextInt();  
        scanner.nextLine(); // Consume newline left-over  
  
        switch (choice) {  
           case 1:  
              addIncome();  
              break;  
           case 2:  
              addExpense();  
              break;  
           case 3:  
              viewBalance();  
              break;  
           case 4:  
              viewTransactions();  
              break;  
           case 5:  
              generateSummary();  
              break;  
           case 6:  
              updateTransaction();  
              break;  
           case 7:  
              deleteTransaction();  
              break;  
           case 8:  
              searchTransactions();  
              break;  
           case 9:  
              System.out.println("Exiting...");  
              return;  
           default:  
              System.out.println("Invalid choice. Please try again.");  
        }  
      }  
   }  
  
   private void addIncome() {  
      System.out.print("Enter income amount: ");  
      double amount = scanner.nextDouble();  
      scanner.nextLine(); // Consume newline left-over  
      System.out.print("Enter income category: ");  
      String category = scanner.nextLine();  
      System.out.print("Enter income date (yyyy-MM-dd): ");  
      String date = scanner.nextLine();  
  
      Transaction transaction = new Transaction(amount, category, date);  
      account.addTransaction(transaction);  
      System.out.println("Income added successfully!");  
   }  
  
   private void addExpense() {  
      System.out.print("Enter expense amount: ");  
      double amount = scanner.nextDouble();  
      scanner.nextLine(); // Consume newline left-over  
      System.out.print("Enter expense category: ");  
      String category = scanner.nextLine();  
      System.out.print("Enter expense date (yyyy-MM-dd): ");  
      String date = scanner.nextLine();  
  
      Transaction transaction = new Transaction(-amount, category, date);  
      account.addTransaction(transaction);  
      System.out.println("Expense added successfully!");  
   }  
  
   private void viewBalance() {  
      System.out.println("Current balance: " + account.getBalance());  
   }  
  
   private void viewTransactions() {  
      System.out.println("Transactions:");  
      for (Transaction transaction : account.getTransactions()) {  
        System.out.println(transaction.getAmount() + " " + transaction.getCategory() + " " + transaction.getDate());  
      }  
   }  
  
   private void generateSummary() {  
      System.out.print("Enter start date (yyyy-MM-dd): ");  
      String startDate = scanner.nextLine();  
      System.out.print("Enter end date (yyyy-MM-dd): ");  
      String endDate = scanner.nextLine();  
  
      double income = 0;  
      double expense = 0;  
      for (Transaction transaction : account.getTransactions()) {  
        if (transaction.getDate().compareTo(startDate) >= 0 && transaction.getDate().compareTo(endDate) <= 0) {  
           if (transaction.getAmount() > 0) {  
              income += transaction.getAmount();  
           } else {  
              expense += transaction.getAmount();  
           }  
        }  
      }  
  
      System.out.println("Summary from " + startDate + " to " + endDate);  
      System.out.println("Income: " + income);  
      System.out.println("Expense: " + expense);  
      System.out.println("Balance: " + (income + expense));  
   }  
  
   private void updateTransaction() {  
      System.out.print("Enter transaction ID: ");  
      int id = scanner.nextInt();  
      scanner.nextLine(); // Consume newline left-over  
  
      Transaction transaction = account.getTransactions().get(id);  
      if (transaction != null) {  
        System.out.print("Enter new amount: ");  
        double amount = scanner.nextDouble();  
        scanner.nextLine(); // Consume newline left-over  
        System.out.print("Enter new category: ");  
        String category = scanner.nextLine();  
        System.out.print("Enter new date (yyyy-MM-dd): ");  
        String date = scanner.nextLine();  
  
        transaction = new Transaction(amount, category, date);  
        account.removeTransaction(account.getTransactions().get(id));  
        account.addTransaction(transaction);  
        System.out.println("Transaction updated successfully!");  
      } else {  
        System.out.println("Transaction not found!");  
      }  
   }  
  
   private void deleteTransaction() {  
      System.out.print("Enter transaction ID: ");  
      int id = scanner.nextInt();  
      scanner.nextLine(); // Consume newline left-over  
  
      Transaction transaction = account.getTransactions().get(id);  
      if (transaction != null) {  
        account.removeTransaction(transaction);  
        System.out.println("Transaction deleted successfully!");  
      } else {  
        System.out.println("Transaction not found!");  
      }  
   }  
  
   private void searchTransactions() {  
      System.out.print("Enter search query: ");  
      String query = scanner.nextLine();  
  
      List<Transaction> results = new ArrayList<>();  
      for (Transaction transaction : account.getTransactions()) {  
        if (transaction.getCategory().contains(query) || transaction.getDate().contains(query)) {  
           results.add(transaction);  
        }  
      }  
  
      System.out.println("Search results:");  
      for (Transaction transaction : results) {  
        System.out.println(transaction.getAmount() + " " + transaction.getCategory() + " " + transaction.getDate());  
      }  
   }  
}  
  
public class FinancialTracker {  
   public static void main(String[] args) {  
      FinancialManager manager = new FinancialManager();  
      manager.run();  
   }  
}
